
APP2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000714  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000714  00000788  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000798  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f8  00000000  00000000  00000804  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011ee  00000000  00000000  000008fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000090f  00000000  00000000  00001aea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008b2  00000000  00000000  000023f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000248  00000000  00000000  00002cac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005b8  00000000  00000000  00002ef4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000bda  00000000  00000000  000034ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00004086  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e1       	ldi	r30, 0x14	; 20
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 38 03 	call	0x670	; 0x670 <main>
  7a:	0c 94 88 03 	jmp	0x710	; 0x710 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_voidSetPinDir>:
  82:	41 30       	cpi	r20, 0x01	; 1
  84:	a1 f5       	brne	.+104    	; 0xee <DIO_voidSetPinDir+0x6c>
  86:	81 30       	cpi	r24, 0x01	; 1
  88:	89 f0       	breq	.+34     	; 0xac <DIO_voidSetPinDir+0x2a>
  8a:	28 f0       	brcs	.+10     	; 0x96 <DIO_voidSetPinDir+0x14>
  8c:	82 30       	cpi	r24, 0x02	; 2
  8e:	c9 f0       	breq	.+50     	; 0xc2 <DIO_voidSetPinDir+0x40>
  90:	83 30       	cpi	r24, 0x03	; 3
  92:	11 f1       	breq	.+68     	; 0xd8 <DIO_voidSetPinDir+0x56>
  94:	08 95       	ret
  96:	2a b3       	in	r18, 0x1a	; 26
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <DIO_voidSetPinDir+0x20>
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	6a 95       	dec	r22
  a4:	e2 f7       	brpl	.-8      	; 0x9e <DIO_voidSetPinDir+0x1c>
  a6:	82 2b       	or	r24, r18
  a8:	8a bb       	out	0x1a, r24	; 26
  aa:	08 95       	ret
  ac:	27 b3       	in	r18, 0x17	; 23
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <DIO_voidSetPinDir+0x36>
  b4:	88 0f       	add	r24, r24
  b6:	99 1f       	adc	r25, r25
  b8:	6a 95       	dec	r22
  ba:	e2 f7       	brpl	.-8      	; 0xb4 <DIO_voidSetPinDir+0x32>
  bc:	82 2b       	or	r24, r18
  be:	87 bb       	out	0x17, r24	; 23
  c0:	08 95       	ret
  c2:	24 b3       	in	r18, 0x14	; 20
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	02 c0       	rjmp	.+4      	; 0xce <DIO_voidSetPinDir+0x4c>
  ca:	88 0f       	add	r24, r24
  cc:	99 1f       	adc	r25, r25
  ce:	6a 95       	dec	r22
  d0:	e2 f7       	brpl	.-8      	; 0xca <DIO_voidSetPinDir+0x48>
  d2:	82 2b       	or	r24, r18
  d4:	84 bb       	out	0x14, r24	; 20
  d6:	08 95       	ret
  d8:	21 b3       	in	r18, 0x11	; 17
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_voidSetPinDir+0x62>
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <DIO_voidSetPinDir+0x5e>
  e8:	82 2b       	or	r24, r18
  ea:	81 bb       	out	0x11, r24	; 17
  ec:	08 95       	ret
  ee:	41 11       	cpse	r20, r1
  f0:	37 c0       	rjmp	.+110    	; 0x160 <DIO_voidSetPinDir+0xde>
  f2:	81 30       	cpi	r24, 0x01	; 1
  f4:	91 f0       	breq	.+36     	; 0x11a <DIO_voidSetPinDir+0x98>
  f6:	28 f0       	brcs	.+10     	; 0x102 <DIO_voidSetPinDir+0x80>
  f8:	82 30       	cpi	r24, 0x02	; 2
  fa:	d9 f0       	breq	.+54     	; 0x132 <DIO_voidSetPinDir+0xb0>
  fc:	83 30       	cpi	r24, 0x03	; 3
  fe:	29 f1       	breq	.+74     	; 0x14a <DIO_voidSetPinDir+0xc8>
 100:	08 95       	ret
 102:	2a b3       	in	r18, 0x1a	; 26
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	02 c0       	rjmp	.+4      	; 0x10e <DIO_voidSetPinDir+0x8c>
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	6a 95       	dec	r22
 110:	e2 f7       	brpl	.-8      	; 0x10a <DIO_voidSetPinDir+0x88>
 112:	80 95       	com	r24
 114:	82 23       	and	r24, r18
 116:	8a bb       	out	0x1a, r24	; 26
 118:	08 95       	ret
 11a:	27 b3       	in	r18, 0x17	; 23
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	02 c0       	rjmp	.+4      	; 0x126 <DIO_voidSetPinDir+0xa4>
 122:	88 0f       	add	r24, r24
 124:	99 1f       	adc	r25, r25
 126:	6a 95       	dec	r22
 128:	e2 f7       	brpl	.-8      	; 0x122 <DIO_voidSetPinDir+0xa0>
 12a:	80 95       	com	r24
 12c:	82 23       	and	r24, r18
 12e:	87 bb       	out	0x17, r24	; 23
 130:	08 95       	ret
 132:	24 b3       	in	r18, 0x14	; 20
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	02 c0       	rjmp	.+4      	; 0x13e <DIO_voidSetPinDir+0xbc>
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	6a 95       	dec	r22
 140:	e2 f7       	brpl	.-8      	; 0x13a <DIO_voidSetPinDir+0xb8>
 142:	80 95       	com	r24
 144:	82 23       	and	r24, r18
 146:	84 bb       	out	0x14, r24	; 20
 148:	08 95       	ret
 14a:	21 b3       	in	r18, 0x11	; 17
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_voidSetPinDir+0xd4>
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	6a 95       	dec	r22
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_voidSetPinDir+0xd0>
 15a:	80 95       	com	r24
 15c:	82 23       	and	r24, r18
 15e:	81 bb       	out	0x11, r24	; 17
 160:	08 95       	ret

00000162 <DIO_voidSetPinVal>:
 162:	41 30       	cpi	r20, 0x01	; 1
 164:	a1 f5       	brne	.+104    	; 0x1ce <DIO_voidSetPinVal+0x6c>
 166:	81 30       	cpi	r24, 0x01	; 1
 168:	89 f0       	breq	.+34     	; 0x18c <DIO_voidSetPinVal+0x2a>
 16a:	28 f0       	brcs	.+10     	; 0x176 <DIO_voidSetPinVal+0x14>
 16c:	82 30       	cpi	r24, 0x02	; 2
 16e:	c9 f0       	breq	.+50     	; 0x1a2 <DIO_voidSetPinVal+0x40>
 170:	83 30       	cpi	r24, 0x03	; 3
 172:	11 f1       	breq	.+68     	; 0x1b8 <DIO_voidSetPinVal+0x56>
 174:	08 95       	ret
 176:	2b b3       	in	r18, 0x1b	; 27
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	02 c0       	rjmp	.+4      	; 0x182 <DIO_voidSetPinVal+0x20>
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	6a 95       	dec	r22
 184:	e2 f7       	brpl	.-8      	; 0x17e <DIO_voidSetPinVal+0x1c>
 186:	82 2b       	or	r24, r18
 188:	8b bb       	out	0x1b, r24	; 27
 18a:	08 95       	ret
 18c:	28 b3       	in	r18, 0x18	; 24
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	02 c0       	rjmp	.+4      	; 0x198 <DIO_voidSetPinVal+0x36>
 194:	88 0f       	add	r24, r24
 196:	99 1f       	adc	r25, r25
 198:	6a 95       	dec	r22
 19a:	e2 f7       	brpl	.-8      	; 0x194 <DIO_voidSetPinVal+0x32>
 19c:	82 2b       	or	r24, r18
 19e:	88 bb       	out	0x18, r24	; 24
 1a0:	08 95       	ret
 1a2:	25 b3       	in	r18, 0x15	; 21
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <DIO_voidSetPinVal+0x4c>
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	6a 95       	dec	r22
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <DIO_voidSetPinVal+0x48>
 1b2:	82 2b       	or	r24, r18
 1b4:	85 bb       	out	0x15, r24	; 21
 1b6:	08 95       	ret
 1b8:	22 b3       	in	r18, 0x12	; 18
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <DIO_voidSetPinVal+0x62>
 1c0:	88 0f       	add	r24, r24
 1c2:	99 1f       	adc	r25, r25
 1c4:	6a 95       	dec	r22
 1c6:	e2 f7       	brpl	.-8      	; 0x1c0 <DIO_voidSetPinVal+0x5e>
 1c8:	82 2b       	or	r24, r18
 1ca:	82 bb       	out	0x12, r24	; 18
 1cc:	08 95       	ret
 1ce:	41 11       	cpse	r20, r1
 1d0:	37 c0       	rjmp	.+110    	; 0x240 <DIO_voidSetPinVal+0xde>
 1d2:	81 30       	cpi	r24, 0x01	; 1
 1d4:	91 f0       	breq	.+36     	; 0x1fa <DIO_voidSetPinVal+0x98>
 1d6:	28 f0       	brcs	.+10     	; 0x1e2 <DIO_voidSetPinVal+0x80>
 1d8:	82 30       	cpi	r24, 0x02	; 2
 1da:	d9 f0       	breq	.+54     	; 0x212 <DIO_voidSetPinVal+0xb0>
 1dc:	83 30       	cpi	r24, 0x03	; 3
 1de:	29 f1       	breq	.+74     	; 0x22a <DIO_voidSetPinVal+0xc8>
 1e0:	08 95       	ret
 1e2:	2b b3       	in	r18, 0x1b	; 27
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <DIO_voidSetPinVal+0x8c>
 1ea:	88 0f       	add	r24, r24
 1ec:	99 1f       	adc	r25, r25
 1ee:	6a 95       	dec	r22
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <DIO_voidSetPinVal+0x88>
 1f2:	80 95       	com	r24
 1f4:	82 23       	and	r24, r18
 1f6:	8b bb       	out	0x1b, r24	; 27
 1f8:	08 95       	ret
 1fa:	28 b3       	in	r18, 0x18	; 24
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_voidSetPinVal+0xa4>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_voidSetPinVal+0xa0>
 20a:	80 95       	com	r24
 20c:	82 23       	and	r24, r18
 20e:	88 bb       	out	0x18, r24	; 24
 210:	08 95       	ret
 212:	25 b3       	in	r18, 0x15	; 21
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	02 c0       	rjmp	.+4      	; 0x21e <DIO_voidSetPinVal+0xbc>
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	6a 95       	dec	r22
 220:	e2 f7       	brpl	.-8      	; 0x21a <DIO_voidSetPinVal+0xb8>
 222:	80 95       	com	r24
 224:	82 23       	and	r24, r18
 226:	85 bb       	out	0x15, r24	; 21
 228:	08 95       	ret
 22a:	22 b3       	in	r18, 0x12	; 18
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_voidSetPinVal+0xd4>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	6a 95       	dec	r22
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_voidSetPinVal+0xd0>
 23a:	80 95       	com	r24
 23c:	82 23       	and	r24, r18
 23e:	82 bb       	out	0x12, r24	; 18
 240:	08 95       	ret

00000242 <DIO_void_Get_PinVal>:
 242:	81 30       	cpi	r24, 0x01	; 1
 244:	79 f0       	breq	.+30     	; 0x264 <DIO_void_Get_PinVal+0x22>
 246:	28 f0       	brcs	.+10     	; 0x252 <DIO_void_Get_PinVal+0x10>
 248:	82 30       	cpi	r24, 0x02	; 2
 24a:	a9 f0       	breq	.+42     	; 0x276 <DIO_void_Get_PinVal+0x34>
 24c:	83 30       	cpi	r24, 0x03	; 3
 24e:	e1 f0       	breq	.+56     	; 0x288 <DIO_void_Get_PinVal+0x46>
 250:	24 c0       	rjmp	.+72     	; 0x29a <DIO_void_Get_PinVal+0x58>
 252:	89 b3       	in	r24, 0x19	; 25
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	02 c0       	rjmp	.+4      	; 0x25c <DIO_void_Get_PinVal+0x1a>
 258:	95 95       	asr	r25
 25a:	87 95       	ror	r24
 25c:	6a 95       	dec	r22
 25e:	e2 f7       	brpl	.-8      	; 0x258 <DIO_void_Get_PinVal+0x16>
 260:	81 70       	andi	r24, 0x01	; 1
 262:	08 95       	ret
 264:	86 b3       	in	r24, 0x16	; 22
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	02 c0       	rjmp	.+4      	; 0x26e <DIO_void_Get_PinVal+0x2c>
 26a:	95 95       	asr	r25
 26c:	87 95       	ror	r24
 26e:	6a 95       	dec	r22
 270:	e2 f7       	brpl	.-8      	; 0x26a <DIO_void_Get_PinVal+0x28>
 272:	81 70       	andi	r24, 0x01	; 1
 274:	08 95       	ret
 276:	83 b3       	in	r24, 0x13	; 19
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	02 c0       	rjmp	.+4      	; 0x280 <DIO_void_Get_PinVal+0x3e>
 27c:	95 95       	asr	r25
 27e:	87 95       	ror	r24
 280:	6a 95       	dec	r22
 282:	e2 f7       	brpl	.-8      	; 0x27c <DIO_void_Get_PinVal+0x3a>
 284:	81 70       	andi	r24, 0x01	; 1
 286:	08 95       	ret
 288:	80 b3       	in	r24, 0x10	; 16
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	02 c0       	rjmp	.+4      	; 0x292 <DIO_void_Get_PinVal+0x50>
 28e:	95 95       	asr	r25
 290:	87 95       	ror	r24
 292:	6a 95       	dec	r22
 294:	e2 f7       	brpl	.-8      	; 0x28e <DIO_void_Get_PinVal+0x4c>
 296:	81 70       	andi	r24, 0x01	; 1
 298:	08 95       	ret
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	08 95       	ret

0000029e <DIO_voidSetPortDir>:
 29e:	81 30       	cpi	r24, 0x01	; 1
 2a0:	41 f0       	breq	.+16     	; 0x2b2 <DIO_voidSetPortDir+0x14>
 2a2:	28 f0       	brcs	.+10     	; 0x2ae <DIO_voidSetPortDir+0x10>
 2a4:	82 30       	cpi	r24, 0x02	; 2
 2a6:	39 f0       	breq	.+14     	; 0x2b6 <DIO_voidSetPortDir+0x18>
 2a8:	83 30       	cpi	r24, 0x03	; 3
 2aa:	39 f0       	breq	.+14     	; 0x2ba <DIO_voidSetPortDir+0x1c>
 2ac:	08 95       	ret
 2ae:	6a bb       	out	0x1a, r22	; 26
 2b0:	08 95       	ret
 2b2:	67 bb       	out	0x17, r22	; 23
 2b4:	08 95       	ret
 2b6:	64 bb       	out	0x14, r22	; 20
 2b8:	08 95       	ret
 2ba:	61 bb       	out	0x11, r22	; 17
 2bc:	08 95       	ret

000002be <KEYPAD_voidInit>:
					  {1,2,3,'-',},	
					   {'C',0,'=','+'}  
	                  
} ; 

void KEYPAD_voidInit(void){
 2be:	0f 93       	push	r16
 2c0:	1f 93       	push	r17
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
 2c6:	cd b7       	in	r28, 0x3d	; 61
 2c8:	de b7       	in	r29, 0x3e	; 62
 2ca:	28 97       	sbiw	r28, 0x08	; 8
 2cc:	0f b6       	in	r0, 0x3f	; 63
 2ce:	f8 94       	cli
 2d0:	de bf       	out	0x3e, r29	; 62
 2d2:	0f be       	out	0x3f, r0	; 63
 2d4:	cd bf       	out	0x3d, r28	; 61
	
	u8 COL_PINS[4]={KEYPAD_C0_PIN,KEYPAD_C1_PIN,KEYPAD_C2_PIN,KEYPAD_C3_PIN} ; 
 2d6:	84 e0       	ldi	r24, 0x04	; 4
 2d8:	89 83       	std	Y+1, r24	; 0x01
 2da:	85 e0       	ldi	r24, 0x05	; 5
 2dc:	8a 83       	std	Y+2, r24	; 0x02
 2de:	86 e0       	ldi	r24, 0x06	; 6
 2e0:	8b 83       	std	Y+3, r24	; 0x03
 2e2:	87 e0       	ldi	r24, 0x07	; 7
 2e4:	8c 83       	std	Y+4, r24	; 0x04
	u8 ROW_PINS[4]={KEYPAD_R0_PIN,KEYPAD_R1_PIN,KEYPAD_R2_PIN,KEYPAD_R3_PIN} ; 
 2e6:	1d 82       	std	Y+5, r1	; 0x05
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	8e 83       	std	Y+6, r24	; 0x06
 2ec:	82 e0       	ldi	r24, 0x02	; 2
 2ee:	8f 83       	std	Y+7, r24	; 0x07
 2f0:	83 e0       	ldi	r24, 0x03	; 3
 2f2:	88 87       	std	Y+8, r24	; 0x08
	u8 col=0 ; 
	u8 row=0 ; 
	
	 /* config CLO PINS AS OUTPUT HIGH  */		
	    for (col=0 ; col<4;col++)
 2f4:	10 e0       	ldi	r17, 0x00	; 0
 2f6:	12 c0       	rjmp	.+36     	; 0x31c <KEYPAD_voidInit+0x5e>
	    {
			  /* MAKE COL PINS AS OUTPUT  */
			DIO_voidSetPinDir(KEYPAD_COLPORT,COL_PINS[col],OUTPUT) ; 
 2f8:	e1 e0       	ldi	r30, 0x01	; 1
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	ec 0f       	add	r30, r28
 2fe:	fd 1f       	adc	r31, r29
 300:	e1 0f       	add	r30, r17
 302:	f1 1d       	adc	r31, r1
 304:	00 81       	ld	r16, Z
 306:	41 e0       	ldi	r20, 0x01	; 1
 308:	60 2f       	mov	r22, r16
 30a:	82 e0       	ldi	r24, 0x02	; 2
 30c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_voidSetPinDir>
			/* MAKE COL PINS AS  HIGH  */
			DIO_voidSetPinVal(KEYPAD_COLPORT,COL_PINS[col],HIGH) ; 
 310:	41 e0       	ldi	r20, 0x01	; 1
 312:	60 2f       	mov	r22, r16
 314:	82 e0       	ldi	r24, 0x02	; 2
 316:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_voidSetPinVal>
	u8 ROW_PINS[4]={KEYPAD_R0_PIN,KEYPAD_R1_PIN,KEYPAD_R2_PIN,KEYPAD_R3_PIN} ; 
	u8 col=0 ; 
	u8 row=0 ; 
	
	 /* config CLO PINS AS OUTPUT HIGH  */		
	    for (col=0 ; col<4;col++)
 31a:	1f 5f       	subi	r17, 0xFF	; 255
 31c:	14 30       	cpi	r17, 0x04	; 4
 31e:	60 f3       	brcs	.-40     	; 0x2f8 <KEYPAD_voidInit+0x3a>
 320:	10 e0       	ldi	r17, 0x00	; 0
 322:	12 c0       	rjmp	.+36     	; 0x348 <KEYPAD_voidInit+0x8a>
	    }
	/* config ROW PINS AS INPUT HIGH ( to active pullup resistor )  */
	       for (row=0 ; row<4;row++)
	       {
	       	/* MAKE ROW PINS AS INPUT  */
	       	DIO_voidSetPinDir(KEYPAD_ROWPORT,ROW_PINS[row],INPUT) ;
 324:	e5 e0       	ldi	r30, 0x05	; 5
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	ec 0f       	add	r30, r28
 32a:	fd 1f       	adc	r31, r29
 32c:	e1 0f       	add	r30, r17
 32e:	f1 1d       	adc	r31, r1
 330:	00 81       	ld	r16, Z
 332:	40 e0       	ldi	r20, 0x00	; 0
 334:	60 2f       	mov	r22, r16
 336:	82 e0       	ldi	r24, 0x02	; 2
 338:	0e 94 41 00 	call	0x82	; 0x82 <DIO_voidSetPinDir>
	       	/* MAKE ROW PINS AS  HIGH  */
	       	DIO_voidSetPinVal(KEYPAD_ROWPORT,ROW_PINS[row],HIGH) ;
 33c:	41 e0       	ldi	r20, 0x01	; 1
 33e:	60 2f       	mov	r22, r16
 340:	82 e0       	ldi	r24, 0x02	; 2
 342:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_voidSetPinVal>
			DIO_voidSetPinDir(KEYPAD_COLPORT,COL_PINS[col],OUTPUT) ; 
			/* MAKE COL PINS AS  HIGH  */
			DIO_voidSetPinVal(KEYPAD_COLPORT,COL_PINS[col],HIGH) ; 
	    }
	/* config ROW PINS AS INPUT HIGH ( to active pullup resistor )  */
	       for (row=0 ; row<4;row++)
 346:	1f 5f       	subi	r17, 0xFF	; 255
 348:	14 30       	cpi	r17, 0x04	; 4
 34a:	60 f3       	brcs	.-40     	; 0x324 <KEYPAD_voidInit+0x66>
	       	DIO_voidSetPinDir(KEYPAD_ROWPORT,ROW_PINS[row],INPUT) ;
	       	/* MAKE ROW PINS AS  HIGH  */
	       	DIO_voidSetPinVal(KEYPAD_ROWPORT,ROW_PINS[row],HIGH) ;
	       }
	       
}
 34c:	28 96       	adiw	r28, 0x08	; 8
 34e:	0f b6       	in	r0, 0x3f	; 63
 350:	f8 94       	cli
 352:	de bf       	out	0x3e, r29	; 62
 354:	0f be       	out	0x3f, r0	; 63
 356:	cd bf       	out	0x3d, r28	; 61
 358:	df 91       	pop	r29
 35a:	cf 91       	pop	r28
 35c:	1f 91       	pop	r17
 35e:	0f 91       	pop	r16
 360:	08 95       	ret

00000362 <KEYPAD_u8GetKey>:

u8 KEYPAD_u8GetKey(void){
 362:	af 92       	push	r10
 364:	bf 92       	push	r11
 366:	cf 92       	push	r12
 368:	df 92       	push	r13
 36a:	ef 92       	push	r14
 36c:	ff 92       	push	r15
 36e:	0f 93       	push	r16
 370:	1f 93       	push	r17
 372:	cf 93       	push	r28
 374:	df 93       	push	r29
 376:	cd b7       	in	r28, 0x3d	; 61
 378:	de b7       	in	r29, 0x3e	; 62
 37a:	28 97       	sbiw	r28, 0x08	; 8
 37c:	0f b6       	in	r0, 0x3f	; 63
 37e:	f8 94       	cli
 380:	de bf       	out	0x3e, r29	; 62
 382:	0f be       	out	0x3f, r0	; 63
 384:	cd bf       	out	0x3d, r28	; 61
	u8 key_val=0xff ; 
	
	u8 COL_PINS[4]={KEYPAD_C0_PIN,KEYPAD_C1_PIN,KEYPAD_C2_PIN,KEYPAD_C3_PIN} ;
 386:	84 e0       	ldi	r24, 0x04	; 4
 388:	89 83       	std	Y+1, r24	; 0x01
 38a:	85 e0       	ldi	r24, 0x05	; 5
 38c:	8a 83       	std	Y+2, r24	; 0x02
 38e:	86 e0       	ldi	r24, 0x06	; 6
 390:	8b 83       	std	Y+3, r24	; 0x03
 392:	87 e0       	ldi	r24, 0x07	; 7
 394:	8c 83       	std	Y+4, r24	; 0x04
	u8 ROW_PINS[4]={KEYPAD_R0_PIN,KEYPAD_R1_PIN,KEYPAD_R2_PIN,KEYPAD_R3_PIN} ;
 396:	1d 82       	std	Y+5, r1	; 0x05
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	8e 83       	std	Y+6, r24	; 0x06
 39c:	82 e0       	ldi	r24, 0x02	; 2
 39e:	8f 83       	std	Y+7, r24	; 0x07
 3a0:	83 e0       	ldi	r24, 0x03	; 3
 3a2:	88 87       	std	Y+8, r24	; 0x08
	u8 col=0 ;
	u8 row=0 ;
	
	for(col=0;col<4;col++){
 3a4:	b1 2c       	mov	r11, r1
 3a6:	3b c0       	rjmp	.+118    	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
		
		/*  */
		DIO_voidSetPinVal(KEYPAD_COLPORT,COL_PINS[col],LOW) ; 
 3a8:	cb 2c       	mov	r12, r11
 3aa:	d1 2c       	mov	r13, r1
 3ac:	e1 e0       	ldi	r30, 0x01	; 1
 3ae:	f0 e0       	ldi	r31, 0x00	; 0
 3b0:	ec 0f       	add	r30, r28
 3b2:	fd 1f       	adc	r31, r29
 3b4:	ec 0d       	add	r30, r12
 3b6:	fd 1d       	adc	r31, r13
 3b8:	a0 80       	ld	r10, Z
 3ba:	40 e0       	ldi	r20, 0x00	; 0
 3bc:	6a 2d       	mov	r22, r10
 3be:	82 e0       	ldi	r24, 0x02	; 2
 3c0:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_voidSetPinVal>
		
		for(row=0 ; row<4;row++){
 3c4:	10 e0       	ldi	r17, 0x00	; 0
 3c6:	23 c0       	rjmp	.+70     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
			
			if(DIO_void_Get_PinVal(KEYPAD_ROWPORT,ROW_PINS[row])==0){
 3c8:	e1 2e       	mov	r14, r17
 3ca:	f1 2c       	mov	r15, r1
 3cc:	e5 e0       	ldi	r30, 0x05	; 5
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	ec 0f       	add	r30, r28
 3d2:	fd 1f       	adc	r31, r29
 3d4:	ee 0d       	add	r30, r14
 3d6:	ff 1d       	adc	r31, r15
 3d8:	00 81       	ld	r16, Z
 3da:	60 2f       	mov	r22, r16
 3dc:	82 e0       	ldi	r24, 0x02	; 2
 3de:	0e 94 21 01 	call	0x242	; 0x242 <DIO_void_Get_PinVal>
 3e2:	81 11       	cpse	r24, r1
 3e4:	13 c0       	rjmp	.+38     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
				
				key_val=keypad_keys[row][col] ; 
 3e6:	c7 01       	movw	r24, r14
 3e8:	88 0f       	add	r24, r24
 3ea:	99 1f       	adc	r25, r25
 3ec:	88 0f       	add	r24, r24
 3ee:	99 1f       	adc	r25, r25
 3f0:	80 5a       	subi	r24, 0xA0	; 160
 3f2:	9f 4f       	sbci	r25, 0xFF	; 255
 3f4:	fc 01       	movw	r30, r24
 3f6:	ec 0d       	add	r30, r12
 3f8:	fd 1d       	adc	r31, r13
 3fa:	10 81       	ld	r17, Z
				
				while(DIO_void_Get_PinVal(KEYPAD_ROWPORT,ROW_PINS[row])==0) ; 
 3fc:	60 2f       	mov	r22, r16
 3fe:	82 e0       	ldi	r24, 0x02	; 2
 400:	0e 94 21 01 	call	0x242	; 0x242 <DIO_void_Get_PinVal>
 404:	88 23       	and	r24, r24
 406:	d1 f3       	breq	.-12     	; 0x3fc <KEYPAD_u8GetKey+0x9a>
				
				return key_val ; 
 408:	81 2f       	mov	r24, r17
 40a:	0d c0       	rjmp	.+26     	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
	for(col=0;col<4;col++){
		
		/*  */
		DIO_voidSetPinVal(KEYPAD_COLPORT,COL_PINS[col],LOW) ; 
		
		for(row=0 ; row<4;row++){
 40c:	1f 5f       	subi	r17, 0xFF	; 255
 40e:	14 30       	cpi	r17, 0x04	; 4
 410:	d8 f2       	brcs	.-74     	; 0x3c8 <KEYPAD_u8GetKey+0x66>
			}
			
			
		}
		
		DIO_voidSetPinVal(KEYPAD_COLPORT,COL_PINS[col],HIGH) ;
 412:	41 e0       	ldi	r20, 0x01	; 1
 414:	6a 2d       	mov	r22, r10
 416:	82 e0       	ldi	r24, 0x02	; 2
 418:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_voidSetPinVal>
	u8 COL_PINS[4]={KEYPAD_C0_PIN,KEYPAD_C1_PIN,KEYPAD_C2_PIN,KEYPAD_C3_PIN} ;
	u8 ROW_PINS[4]={KEYPAD_R0_PIN,KEYPAD_R1_PIN,KEYPAD_R2_PIN,KEYPAD_R3_PIN} ;
	u8 col=0 ;
	u8 row=0 ;
	
	for(col=0;col<4;col++){
 41c:	b3 94       	inc	r11
 41e:	83 e0       	ldi	r24, 0x03	; 3
 420:	8b 15       	cp	r24, r11
 422:	10 f6       	brcc	.-124    	; 0x3a8 <KEYPAD_u8GetKey+0x46>
		
	}
	
	
	
	return key_val ; 
 424:	8f ef       	ldi	r24, 0xFF	; 255
	
 426:	28 96       	adiw	r28, 0x08	; 8
 428:	0f b6       	in	r0, 0x3f	; 63
 42a:	f8 94       	cli
 42c:	de bf       	out	0x3e, r29	; 62
 42e:	0f be       	out	0x3f, r0	; 63
 430:	cd bf       	out	0x3d, r28	; 61
 432:	df 91       	pop	r29
 434:	cf 91       	pop	r28
 436:	1f 91       	pop	r17
 438:	0f 91       	pop	r16
 43a:	ff 90       	pop	r15
 43c:	ef 90       	pop	r14
 43e:	df 90       	pop	r13
 440:	cf 90       	pop	r12
 442:	bf 90       	pop	r11
 444:	af 90       	pop	r10
 446:	08 95       	ret

00000448 <LCD_void_SHD>:
 448:	0f 93       	push	r16
 44a:	1f 93       	push	r17
 44c:	cf 93       	push	r28
 44e:	df 93       	push	r29
 450:	00 d0       	rcall	.+0      	; 0x452 <LCD_void_SHD+0xa>
 452:	00 d0       	rcall	.+0      	; 0x454 <LCD_void_SHD+0xc>
 454:	cd b7       	in	r28, 0x3d	; 61
 456:	de b7       	in	r29, 0x3e	; 62
 458:	08 2f       	mov	r16, r24
 45a:	84 e0       	ldi	r24, 0x04	; 4
 45c:	89 83       	std	Y+1, r24	; 0x01
 45e:	85 e0       	ldi	r24, 0x05	; 5
 460:	8a 83       	std	Y+2, r24	; 0x02
 462:	86 e0       	ldi	r24, 0x06	; 6
 464:	8b 83       	std	Y+3, r24	; 0x03
 466:	87 e0       	ldi	r24, 0x07	; 7
 468:	8c 83       	std	Y+4, r24	; 0x04
 46a:	10 e0       	ldi	r17, 0x00	; 0
 46c:	14 c0       	rjmp	.+40     	; 0x496 <LCD_void_SHD+0x4e>
 46e:	40 2f       	mov	r20, r16
 470:	50 e0       	ldi	r21, 0x00	; 0
 472:	01 2e       	mov	r0, r17
 474:	02 c0       	rjmp	.+4      	; 0x47a <LCD_void_SHD+0x32>
 476:	55 95       	asr	r21
 478:	47 95       	ror	r20
 47a:	0a 94       	dec	r0
 47c:	e2 f7       	brpl	.-8      	; 0x476 <LCD_void_SHD+0x2e>
 47e:	41 70       	andi	r20, 0x01	; 1
 480:	e1 e0       	ldi	r30, 0x01	; 1
 482:	f0 e0       	ldi	r31, 0x00	; 0
 484:	ec 0f       	add	r30, r28
 486:	fd 1f       	adc	r31, r29
 488:	e1 0f       	add	r30, r17
 48a:	f1 1d       	adc	r31, r1
 48c:	60 81       	ld	r22, Z
 48e:	80 e0       	ldi	r24, 0x00	; 0
 490:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_voidSetPinVal>
 494:	1f 5f       	subi	r17, 0xFF	; 255
 496:	14 30       	cpi	r17, 0x04	; 4
 498:	50 f3       	brcs	.-44     	; 0x46e <LCD_void_SHD+0x26>
 49a:	0f 90       	pop	r0
 49c:	0f 90       	pop	r0
 49e:	0f 90       	pop	r0
 4a0:	0f 90       	pop	r0
 4a2:	df 91       	pop	r29
 4a4:	cf 91       	pop	r28
 4a6:	1f 91       	pop	r17
 4a8:	0f 91       	pop	r16
 4aa:	08 95       	ret

000004ac <LCD_SendEnable>:
 4ac:	41 e0       	ldi	r20, 0x01	; 1
 4ae:	63 e0       	ldi	r22, 0x03	; 3
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_voidSetPinVal>
 4b6:	8f e3       	ldi	r24, 0x3F	; 63
 4b8:	9f e1       	ldi	r25, 0x1F	; 31
 4ba:	01 97       	sbiw	r24, 0x01	; 1
 4bc:	f1 f7       	brne	.-4      	; 0x4ba <LCD_SendEnable+0xe>
 4be:	00 c0       	rjmp	.+0      	; 0x4c0 <LCD_SendEnable+0x14>
 4c0:	00 00       	nop
 4c2:	40 e0       	ldi	r20, 0x00	; 0
 4c4:	63 e0       	ldi	r22, 0x03	; 3
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_voidSetPinVal>
 4cc:	08 95       	ret

000004ce <LCD_voidSendData>:
 4ce:	cf 93       	push	r28
 4d0:	c8 2f       	mov	r28, r24
 4d2:	41 e0       	ldi	r20, 0x01	; 1
 4d4:	61 e0       	ldi	r22, 0x01	; 1
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_voidSetPinVal>
 4dc:	40 e0       	ldi	r20, 0x00	; 0
 4de:	62 e0       	ldi	r22, 0x02	; 2
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_voidSetPinVal>
 4e6:	8c 2f       	mov	r24, r28
 4e8:	82 95       	swap	r24
 4ea:	8f 70       	andi	r24, 0x0F	; 15
 4ec:	0e 94 24 02 	call	0x448	; 0x448 <LCD_void_SHD>
 4f0:	0e 94 56 02 	call	0x4ac	; 0x4ac <LCD_SendEnable>
 4f4:	8c 2f       	mov	r24, r28
 4f6:	0e 94 24 02 	call	0x448	; 0x448 <LCD_void_SHD>
 4fa:	0e 94 56 02 	call	0x4ac	; 0x4ac <LCD_SendEnable>
 4fe:	cf 91       	pop	r28
 500:	08 95       	ret

00000502 <LCD_voidSendCommand>:
 502:	cf 93       	push	r28
 504:	c8 2f       	mov	r28, r24
 506:	40 e0       	ldi	r20, 0x00	; 0
 508:	61 e0       	ldi	r22, 0x01	; 1
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_voidSetPinVal>
 510:	40 e0       	ldi	r20, 0x00	; 0
 512:	62 e0       	ldi	r22, 0x02	; 2
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	0e 94 b1 00 	call	0x162	; 0x162 <DIO_voidSetPinVal>
 51a:	8c 2f       	mov	r24, r28
 51c:	82 95       	swap	r24
 51e:	8f 70       	andi	r24, 0x0F	; 15
 520:	0e 94 24 02 	call	0x448	; 0x448 <LCD_void_SHD>
 524:	0e 94 56 02 	call	0x4ac	; 0x4ac <LCD_SendEnable>
 528:	8c 2f       	mov	r24, r28
 52a:	0e 94 24 02 	call	0x448	; 0x448 <LCD_void_SHD>
 52e:	0e 94 56 02 	call	0x4ac	; 0x4ac <LCD_SendEnable>
 532:	cf 91       	pop	r28
 534:	08 95       	ret

00000536 <LCD_voidInit>:
 536:	2f ef       	ldi	r18, 0xFF	; 255
 538:	83 ef       	ldi	r24, 0xF3	; 243
 53a:	91 e0       	ldi	r25, 0x01	; 1
 53c:	21 50       	subi	r18, 0x01	; 1
 53e:	80 40       	sbci	r24, 0x00	; 0
 540:	90 40       	sbci	r25, 0x00	; 0
 542:	e1 f7       	brne	.-8      	; 0x53c <LCD_voidInit+0x6>
 544:	00 c0       	rjmp	.+0      	; 0x546 <LCD_voidInit+0x10>
 546:	00 00       	nop
 548:	82 e0       	ldi	r24, 0x02	; 2
 54a:	0e 94 24 02 	call	0x448	; 0x448 <LCD_void_SHD>
 54e:	0e 94 56 02 	call	0x4ac	; 0x4ac <LCD_SendEnable>
 552:	82 e0       	ldi	r24, 0x02	; 2
 554:	0e 94 24 02 	call	0x448	; 0x448 <LCD_void_SHD>
 558:	0e 94 56 02 	call	0x4ac	; 0x4ac <LCD_SendEnable>
 55c:	88 e0       	ldi	r24, 0x08	; 8
 55e:	0e 94 24 02 	call	0x448	; 0x448 <LCD_void_SHD>
 562:	0e 94 56 02 	call	0x4ac	; 0x4ac <LCD_SendEnable>
 566:	8c e0       	ldi	r24, 0x0C	; 12
 568:	0e 94 81 02 	call	0x502	; 0x502 <LCD_voidSendCommand>
 56c:	81 e0       	ldi	r24, 0x01	; 1
 56e:	0e 94 81 02 	call	0x502	; 0x502 <LCD_voidSendCommand>
 572:	08 95       	ret

00000574 <LCD_voidSendnumber>:
 574:	1f 93       	push	r17
 576:	cf 93       	push	r28
 578:	df 93       	push	r29
 57a:	cd b7       	in	r28, 0x3d	; 61
 57c:	de b7       	in	r29, 0x3e	; 62
 57e:	2a 97       	sbiw	r28, 0x0a	; 10
 580:	0f b6       	in	r0, 0x3f	; 63
 582:	f8 94       	cli
 584:	de bf       	out	0x3e, r29	; 62
 586:	0f be       	out	0x3f, r0	; 63
 588:	cd bf       	out	0x3d, r28	; 61
 58a:	ac 01       	movw	r20, r24
 58c:	89 2b       	or	r24, r25
 58e:	a1 f5       	brne	.+104    	; 0x5f8 <LCD_voidSendnumber+0x84>
 590:	80 e3       	ldi	r24, 0x30	; 48
 592:	0e 94 67 02 	call	0x4ce	; 0x4ce <LCD_voidSendData>
 596:	44 c0       	rjmp	.+136    	; 0x620 <LCD_voidSendnumber+0xac>
 598:	9a 01       	movw	r18, r20
 59a:	ad ec       	ldi	r26, 0xCD	; 205
 59c:	bc ec       	ldi	r27, 0xCC	; 204
 59e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__umulhisi3>
 5a2:	96 95       	lsr	r25
 5a4:	87 95       	ror	r24
 5a6:	96 95       	lsr	r25
 5a8:	87 95       	ror	r24
 5aa:	96 95       	lsr	r25
 5ac:	87 95       	ror	r24
 5ae:	9c 01       	movw	r18, r24
 5b0:	22 0f       	add	r18, r18
 5b2:	33 1f       	adc	r19, r19
 5b4:	88 0f       	add	r24, r24
 5b6:	99 1f       	adc	r25, r25
 5b8:	88 0f       	add	r24, r24
 5ba:	99 1f       	adc	r25, r25
 5bc:	88 0f       	add	r24, r24
 5be:	99 1f       	adc	r25, r25
 5c0:	82 0f       	add	r24, r18
 5c2:	93 1f       	adc	r25, r19
 5c4:	9a 01       	movw	r18, r20
 5c6:	28 1b       	sub	r18, r24
 5c8:	39 0b       	sbc	r19, r25
 5ca:	c9 01       	movw	r24, r18
 5cc:	e1 e0       	ldi	r30, 0x01	; 1
 5ce:	f0 e0       	ldi	r31, 0x00	; 0
 5d0:	ec 0f       	add	r30, r28
 5d2:	fd 1f       	adc	r31, r29
 5d4:	e1 0f       	add	r30, r17
 5d6:	f1 1d       	adc	r31, r1
 5d8:	17 fd       	sbrc	r17, 7
 5da:	fa 95       	dec	r31
 5dc:	80 5d       	subi	r24, 0xD0	; 208
 5de:	80 83       	st	Z, r24
 5e0:	9a 01       	movw	r18, r20
 5e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__umulhisi3>
 5e6:	ac 01       	movw	r20, r24
 5e8:	56 95       	lsr	r21
 5ea:	47 95       	ror	r20
 5ec:	56 95       	lsr	r21
 5ee:	47 95       	ror	r20
 5f0:	56 95       	lsr	r21
 5f2:	47 95       	ror	r20
 5f4:	1f 5f       	subi	r17, 0xFF	; 255
 5f6:	01 c0       	rjmp	.+2      	; 0x5fa <LCD_voidSendnumber+0x86>
 5f8:	10 e0       	ldi	r17, 0x00	; 0
 5fa:	41 15       	cp	r20, r1
 5fc:	51 05       	cpc	r21, r1
 5fe:	61 f6       	brne	.-104    	; 0x598 <LCD_voidSendnumber+0x24>
 600:	11 50       	subi	r17, 0x01	; 1
 602:	0c c0       	rjmp	.+24     	; 0x61c <LCD_voidSendnumber+0xa8>
 604:	e1 e0       	ldi	r30, 0x01	; 1
 606:	f0 e0       	ldi	r31, 0x00	; 0
 608:	ec 0f       	add	r30, r28
 60a:	fd 1f       	adc	r31, r29
 60c:	e1 0f       	add	r30, r17
 60e:	f1 1d       	adc	r31, r1
 610:	17 fd       	sbrc	r17, 7
 612:	fa 95       	dec	r31
 614:	80 81       	ld	r24, Z
 616:	0e 94 67 02 	call	0x4ce	; 0x4ce <LCD_voidSendData>
 61a:	11 50       	subi	r17, 0x01	; 1
 61c:	11 23       	and	r17, r17
 61e:	94 f7       	brge	.-28     	; 0x604 <LCD_voidSendnumber+0x90>
 620:	2a 96       	adiw	r28, 0x0a	; 10
 622:	0f b6       	in	r0, 0x3f	; 63
 624:	f8 94       	cli
 626:	de bf       	out	0x3e, r29	; 62
 628:	0f be       	out	0x3f, r0	; 63
 62a:	cd bf       	out	0x3d, r28	; 61
 62c:	df 91       	pop	r29
 62e:	cf 91       	pop	r28
 630:	1f 91       	pop	r17
 632:	08 95       	ret

00000634 <simple_cal>:
}

u8 simple_cal(u8 num1 ,u8 op ,u8 num2){
	
	u8 result=0 ; 
	switch(op){
 634:	6b 32       	cpi	r22, 0x2B	; 43
 636:	49 f0       	breq	.+18     	; 0x64a <simple_cal+0x16>
 638:	18 f4       	brcc	.+6      	; 0x640 <simple_cal+0xc>
 63a:	6a 32       	cpi	r22, 0x2A	; 42
 63c:	51 f0       	breq	.+20     	; 0x652 <simple_cal+0x1e>
 63e:	11 c0       	rjmp	.+34     	; 0x662 <simple_cal+0x2e>
 640:	6d 32       	cpi	r22, 0x2D	; 45
 642:	29 f0       	breq	.+10     	; 0x64e <simple_cal+0x1a>
 644:	6f 32       	cpi	r22, 0x2F	; 47
 646:	49 f0       	breq	.+18     	; 0x65a <simple_cal+0x26>
 648:	0c c0       	rjmp	.+24     	; 0x662 <simple_cal+0x2e>
		
		case '+':result=num1+num2 ; break;
 64a:	84 0f       	add	r24, r20
 64c:	08 95       	ret
		case '-':result=num1-num2 ; break;
 64e:	84 1b       	sub	r24, r20
 650:	08 95       	ret
		case '*':result=num1*num2 ; break;
 652:	84 9f       	mul	r24, r20
 654:	80 2d       	mov	r24, r0
 656:	11 24       	eor	r1, r1
 658:	08 95       	ret
		case '/':result=num1/num2 ; break ; 
 65a:	64 2f       	mov	r22, r20
 65c:	0e 94 6d 03 	call	0x6da	; 0x6da <__udivmodqi4>
 660:	08 95       	ret
    }
}

u8 simple_cal(u8 num1 ,u8 op ,u8 num2){
	
	u8 result=0 ; 
 662:	80 e0       	ldi	r24, 0x00	; 0
		case '/':result=num1/num2 ; break ; 
	}
	
	return result ; 
	
}
 664:	08 95       	ret

00000666 <get_key>:
u8 get_key(){
	
	u8 key=0xff ; 
	do
	{
		key=KEYPAD_u8GetKey() ;
 666:	0e 94 b1 01 	call	0x362	; 0x362 <KEYPAD_u8GetKey>
	} while (key==0xff);
 66a:	8f 3f       	cpi	r24, 0xFF	; 255
 66c:	e1 f3       	breq	.-8      	; 0x666 <get_key>
	
	return key ; 
 66e:	08 95       	ret

00000670 <main>:
{  
	u8 num1 , num2 ,op , result ; 
	u8 key=0xff  ; 
	u8 key1 ;
	  /* lcd init */
	  DIO_voidSetPortDir(LCD_DPORT,0xF0) ; 
 670:	60 ef       	ldi	r22, 0xF0	; 240
 672:	80 e0       	ldi	r24, 0x00	; 0
 674:	0e 94 4f 01 	call	0x29e	; 0x29e <DIO_voidSetPortDir>
	  DIO_voidSetPortDir(LCD_CPORT,0x0E) ; 
 678:	6e e0       	ldi	r22, 0x0E	; 14
 67a:	81 e0       	ldi	r24, 0x01	; 1
 67c:	0e 94 4f 01 	call	0x29e	; 0x29e <DIO_voidSetPortDir>
	  LCD_voidInit() ; 
 680:	0e 94 9b 02 	call	0x536	; 0x536 <LCD_voidInit>
	  /* KEYPAD init  */
        KEYPAD_voidInit() ; 
 684:	0e 94 5f 01 	call	0x2be	; 0x2be <KEYPAD_voidInit>
		      
    while (1) 
    {
		  num1 =get_key() ; 
 688:	0e 94 33 03 	call	0x666	; 0x666 <get_key>
 68c:	c8 2f       	mov	r28, r24
		  LCD_voidSendnumber(num1) ; 
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	0e 94 ba 02 	call	0x574	; 0x574 <LCD_voidSendnumber>
		  
		  op=get_key() ; 
 694:	0e 94 33 03 	call	0x666	; 0x666 <get_key>
 698:	d8 2f       	mov	r29, r24
		  LCD_voidSendData(op) ; 
 69a:	0e 94 67 02 	call	0x4ce	; 0x4ce <LCD_voidSendData>
		  num2=get_key() ; 
 69e:	0e 94 33 03 	call	0x666	; 0x666 <get_key>
 6a2:	18 2f       	mov	r17, r24
		  LCD_voidSendnumber(num2) ; 
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	0e 94 ba 02 	call	0x574	; 0x574 <LCD_voidSendnumber>
		  
		  result=simple_cal(num1,op,num2) ; 
 6aa:	41 2f       	mov	r20, r17
 6ac:	6d 2f       	mov	r22, r29
 6ae:	8c 2f       	mov	r24, r28
 6b0:	0e 94 1a 03 	call	0x634	; 0x634 <simple_cal>
 6b4:	c8 2f       	mov	r28, r24
		  
		  key=get_key() ; 
 6b6:	0e 94 33 03 	call	0x666	; 0x666 <get_key>
		  if (key=='=')
 6ba:	8d 33       	cpi	r24, 0x3D	; 61
 6bc:	31 f4       	brne	.+12     	; 0x6ca <main+0x5a>
		  {
			  LCD_voidSendData('=') ; 
 6be:	0e 94 67 02 	call	0x4ce	; 0x4ce <LCD_voidSendData>
			  LCD_voidSendnumber(result) ; 
 6c2:	8c 2f       	mov	r24, r28
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	0e 94 ba 02 	call	0x574	; 0x574 <LCD_voidSendnumber>
		  }
		  key1=get_key() ;
 6ca:	0e 94 33 03 	call	0x666	; 0x666 <get_key>
		  if (key1=='C')
 6ce:	83 34       	cpi	r24, 0x43	; 67
 6d0:	d9 f6       	brne	.-74     	; 0x688 <main+0x18>
		  {
			 
			  LCD_voidSendCommand(0x001) ;
 6d2:	81 e0       	ldi	r24, 0x01	; 1
 6d4:	0e 94 81 02 	call	0x502	; 0x502 <LCD_voidSendCommand>
 6d8:	d7 cf       	rjmp	.-82     	; 0x688 <main+0x18>

000006da <__udivmodqi4>:
 6da:	99 1b       	sub	r25, r25
 6dc:	79 e0       	ldi	r23, 0x09	; 9
 6de:	04 c0       	rjmp	.+8      	; 0x6e8 <__udivmodqi4_ep>

000006e0 <__udivmodqi4_loop>:
 6e0:	99 1f       	adc	r25, r25
 6e2:	96 17       	cp	r25, r22
 6e4:	08 f0       	brcs	.+2      	; 0x6e8 <__udivmodqi4_ep>
 6e6:	96 1b       	sub	r25, r22

000006e8 <__udivmodqi4_ep>:
 6e8:	88 1f       	adc	r24, r24
 6ea:	7a 95       	dec	r23
 6ec:	c9 f7       	brne	.-14     	; 0x6e0 <__udivmodqi4_loop>
 6ee:	80 95       	com	r24
 6f0:	08 95       	ret

000006f2 <__umulhisi3>:
 6f2:	a2 9f       	mul	r26, r18
 6f4:	b0 01       	movw	r22, r0
 6f6:	b3 9f       	mul	r27, r19
 6f8:	c0 01       	movw	r24, r0
 6fa:	a3 9f       	mul	r26, r19
 6fc:	70 0d       	add	r23, r0
 6fe:	81 1d       	adc	r24, r1
 700:	11 24       	eor	r1, r1
 702:	91 1d       	adc	r25, r1
 704:	b2 9f       	mul	r27, r18
 706:	70 0d       	add	r23, r0
 708:	81 1d       	adc	r24, r1
 70a:	11 24       	eor	r1, r1
 70c:	91 1d       	adc	r25, r1
 70e:	08 95       	ret

00000710 <_exit>:
 710:	f8 94       	cli

00000712 <__stop_program>:
 712:	ff cf       	rjmp	.-2      	; 0x712 <__stop_program>
